{"version":3,"sources":["component/VenueItem.jsx","component/VenueList.jsx","component/SideBar.jsx","App.js","serviceWorker.js","index.js"],"names":["VenueItem","setMarkers","_this","props","list","forEach","item","marker","window","google","maps","Marker","position","lat","venue","location","lng","map","animation","Animation","DROP","name","popup","markers","push","setInfoWindow","addListener","_","handleClick","id","checkInfoWindows","react_default","a","createElement","className","this","Component","VenueList","_this2","venues","idx","component_VenueItem","Object","assign","key","SideBar","type","placeholder","onChange","event","updateSearchString","target","value","component_VenueList","handleListItemClick","require","config","console","log","concat","process","App","state","names","photos","photoURL","searchString","short","venueID","setState","handleInput","query","_ref","filter","_ref2","toLowerCase","includes","renderMap","url","index","document","getElementsByTagName","script","src","async","defer","parentNode","insertBefore","loadScript","initMap","getVenues","parameters","client_id","client_secret","intent","ll","radius","v","axios","get","URLSearchParams","then","response","address","data","groups","items","element","formattedAddress","categories","shortName","catch","error","Map","getElementById","center","zoom","infowindow","InfoWindow","myVenue","contentString","title","icon","setContent","open","lib","brand","onClick","href","component_SideBar","copyrights","moreLinks","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c459cadf.chunk.js","sourcesContent":["import React, { Component } from 'react'\n//import {handleListItemClickI} from \"../API/\"\n\nclass VenueItem extends Component {\n\n   // Set the markers based on the list items\n   setMarkers = () => {\n      const { list } = this.props;\n\n      // Iterate through the list items\n      list.forEach(item => {\n         // Create new marker with info of current list item\n         let marker = new window.google.maps.Marker({\n            position: {\n               lat: item.venue.location.lat,\n               lng: item.venue.location.lng\n            },\n            map: this.map,\n            animation: window.google.maps.Animation.DROP,\n            name: item.venue.name,\n            popup: item.popup\n         })\n\n         this.markers.push(marker);  // Add marker to list\n         this.setInfoWindow();       // Create and infoWindow for all of the markers\n\n         // Add marker click event listener\n         marker.addListener('click', _ => {\n            this.props.handleClick(item.venue.id);  // Pass event to parent handler\n            this.checkInfoWindows();                // Set the appropriate infoWindow\n         })\n      })\n   };\n\n\n   render () {\n      return (\n         <div>\n            <li className=\"venueItem button\">\n               {this.props.name}\n            </li>\n         </div>\n      )\n   }\n}\n\nexport default VenueItem\n","import React, { Component } from 'react'\nimport VenueItem from './VenueItem'\n// import SquareAPI from \"../API/\"\n\nclass VenueList extends Component {\n\n   // Set the markers based on the list items\n   setMarkers = () => {\n      const { list } = this.props;\n\n      // Iterate through the list items\n      list.forEach(item => {\n         // Create new marker with info of current list item\n         let marker = new window.google.maps.Marker({\n            position: {\n               lat: item.venue.location.lat,\n               lng: item.venue.location.lng\n            },\n            map: this.map,\n            animation: window.google.maps.Animation.DROP,\n            name: item.venue.name,\n            popup: item.popup\n         })\n\n         this.markers.push(marker);  // Add marker to list\n         this.setInfoWindow();       // Create and infoWindow for all of the markers\n\n         // Add marker click event listener\n         marker.addListener('click', _ => {\n            this.props.handleClick(item.venue.id);  // Pass event to parent handler\n            this.checkInfoWindows();                // Set the appropriate infoWindow\n         })\n      })\n   };\n\n   render () {\n      return (\n         <ol className=\"venueList\">\n            {this.props.venues &&\n            this.props.venues.map((venue, idx) => (\n               <VenueItem key={idx} name={venue}\n               {...this.props}\n               // handleListItemClick={this.props.handleListItemClick}\n               />\n            ))}\n         </ol>\n      );\n   }\n}\n\nexport default VenueList\n","import React, { Component } from 'react'\nimport VenueList from './VenueList'\n\nclass SideBar extends Component {\n   render () {\n      return (\n         <div className=\"sideBar\">\n            <input  type={\"search\"}\n                    id={\"search\"}\n               placeholder={\"Filter Venues\"}\n                    onChange={(event) => this.props.updateSearchString(event.target.value)}\n            />\n            <VenueList venues={this.props.venues} {...this.props}\n                       handleListItemClick={this.props.handleListItemClick}/>\n         </div>\n      )\n   }\n}\nexport default SideBar;\n\n","import React, { Component } from 'react'\nimport './App.css'\n\nimport { Footer, Navbar, NavItem } from 'react-materialize'\n\n// https://www.npmjs.com/package/prop-types\nimport PropTypes from 'prop-types'; // ES6\n\n// https://www.npmjs.com/package/axios\nimport axios from 'axios'\nimport SideBar from './component/SideBar'\nimport VenueList from './component/VenueList'\n\nrequire('dotenv').config()\nconsole.log(`${process.env.REACT_APP_DEV_API_URL}`)\n\nclass App extends Component {\n\n   /*\n    https://www.youtube.com/watch?v=W5LhLZqj76s&feature=youtu.be\n    */\n\n   state = {\n      list: [],\n      names: [],\n      photos: [],\n      photoURL: [],\n      searchString: '',\n      short: [],\n      venueID: [],\n      venues: [],\n   }\n\n   updateSearchString = (searchString) => {\n      if (searchString) {\n         this.setState({searchString});\n      } else {\n         this.setState({searchString: ''});\n      }\n   }\n\n   // handleClick = (id) => {\n   //    this.setState(state => {\n   //       const list = state.list.map(venue => {\n   //          if (venue.venue.id === id) {\n   //             venue.popup = true;\n   //          }\n   //          else {\n   //             venue.popup = false;\n   //          }\n   //          return venue;\n   //       })\n   //\n   //       return ({list})\n   //    })\n   // };\n\n   handleInput = (query) => {\n      this.setState(({ venues }) => {\n         const list = venues.filter(({ venue }) => {\n            return venue.name.toLowerCase().includes(query.toLowerCase());\n         })\n\n         return ({ list });\n      })\n   };\n\n   // 717-8629\n   componentDidMount () {\n      this.getVenues()\n   }\n\n   renderMap = () => {\n      loadScript('https://maps.googleapis.com/maps/api/js?key=AIzaSyC5T8bcDZqx_vYa-ApCWu1hcymdMEmK9ek&callback=initMap')\n      window.initMap = this.initMap\n   }\n\n   getVenues = () => {\n      const explore = 'https://api.foursquare.com/v2/venues/explore?'\n      const photos  = 'https://api.foursquare.com/v2/photos/PHOTO_ID'\n      const search  = 'https://api.foursquare.com/v2/venues/search?'\n      const short   = 'https://api.foursquare.com/v2/venues/'\n      const venues  = 'https://api.foursquare.com/v2/venues/'\n\n\n      // https://www.npmjs.com/package/dotenv\n      // https://medium.com/@danieljameskay/create-react-app-dotenv-281693a19ecd\n      // # with npm\n      // npm install dotenv --S\n      // require('dotenv').config()\n      // There is a quirk here, if we weren't using create-react-app we wouldn't\n      // have to place REACT_APP_ in front of the variable.\n      //\n      const parameters = {\n         client_id:     `${process.env.REACT_APP_client_id}`, // '5V3OK3JM0RT0YWWBQR2ZQNB3UJB3V0LM24GQHKEZKBI2EOWQ', //\n         client_secret: `${process.env.REACT_APP_client_secret}`, // 'HYHANVJXDDZKVSHXHVL4XSXXIELLWJVLSM1EHSZB2KTI4XKK', //\n         query:         'food', //`${process.env.REACT_APP_food}`,          // 'food', //\n         intent:        'browse', //`${process.env.REACT_APP_browse}`,       // browse, //\n         ll:            '35.522489,-97.619255',                  //35.522489, -97.619255\n         radius:        10000, //`${process.env.REACT_APP_radius}`,       //10000, //\n         v:             `${process.env.REACT_APP_v}`             //'20180908'\n      }\n\n      // {console.log(photos)}\n      // https://api.foursquare.com/v2/venues/search?client_id=5V3OK3JM0RT0YWWBQR2ZQNB3UJB3V0LM24GQHKEZKBI2EOWQ&client_secret=HYHANVJXDDZKVSHXHVL4XSXXIELLWJVLSM1EHSZB2KTI4XKK&query=food&intent=browse&ll=35.522489,-97.619255&radius=10000&v=20180926\n      // Pass props to parent component in React.js\n\n\n      axios.get(\n         explore + new URLSearchParams(parameters),\n         photos  + new URLSearchParams(parameters),\n         search  + new URLSearchParams(parameters),\n         short   + new URLSearchParams(parameters),\n         venues  + new URLSearchParams(parameters),\n      )\n         .then(response => {\n            this.setState({\n               address: response.data.response.groups[0].items.map(element => element.venue.location.formattedAddress),\n               names:   response.data.response.groups[0].items.map(element => element.venue.name),\n               //photos:  response.data.response.photos.items[0].items.map(element => element.venue.categories[0].shortName),\n               short:   response.data.response.groups[0].items.map(element => element.venue.categories[0].shortName),\n               venueID: response.data.response.groups[0].items.map(element => element.venue.id),\n               venues:  response.data.response.groups[0].items\n               //photoURLs: [this.state.photoURLs, photoURL]\n               //}))\n               // prefix:  response.data.response.photos.items[0].map(element => element.prefix),\n               // suffix:  response.data.response.photos.items[0].map(element => element.suffix),}, this.renderMap())\n            }, this.renderMap())\n         })\n         .catch(error => {\n            console.log('ERROR!! ' + error)\n         })\n   }\n\n   initMap = () => {\n\n      // Create A Map - Centered in OKC OK\n      var map = new window.google.maps.Map(document.getElementById('map'), {\n         center: {lat: 35.52248, lng: -97.619255},\n         zoom: 13\n      })\n\n      // Create An InfoWindow\n      var infowindow = new window.google.maps.InfoWindow()\n\n      // Display Dynamic Markers\n      this.state.venues.map(myVenue => {\n\n         var contentString =\n            `${myVenue.venue.name + '<br>' +\n            myVenue.venue.location.formattedAddress[0] + '<br>' +\n            myVenue.venue.location.formattedAddress[1] + '<br>' +\n            myVenue.venue.location.formattedAddress[2] + '<br>'\n               }`\n         // Create A Marker\n         var marker = new window.google.maps.Marker({\n            position: {lat: myVenue.venue.location.lat, lng: myVenue.venue.location.lng},\n            map: map,\n            title: myVenue.venue.name,\n            icon: {\n               url: \"http://maps.google.com/mapfiles/ms/icons/yellow-dot.png\"\n            }\n         })\n\n         // Click on A Marker!\n         marker.addListener('click', function() {\n\n            // Change the content\n            infowindow.setContent(contentString)\n\n            // Open An InfoWindow\n            infowindow.open(map, marker)\n         })\n      })\n   }\n\n   render() {\n      return (\n         <main>\n            {/*https://materializecss.com/ documentation*/}\n            {/*https://react-materialize.github.io/#/*/}\n            <Navbar brand='logo'>\n               <NavItem onClick={() => console.log('test click')}>Getting started</NavItem>\n               <NavItem href='components.html'>Components</NavItem>\n            </Navbar>\n\n            {/*<Toast toast=\"here you go!\">*/}\n            {/*Toast*/}\n            {/*</Toast>*/}\n            <div className=\"App\">\n\n               {/*https://developers.google.com/maps/documentation/javascript/tutorial*/}\n               <div id=\"map\"></div>\n               <SideBar {...this.state}\n                  venues={this.state.names.filter(name => name.toLowerCase().includes(this.state.searchString.toLowerCase()))}\n                  updateSearchString={this.updateSearchString}\n               >\n                  {/*<input className=\"search\"/>*/}\n                  <VenueList/>\n               </SideBar>\n               {console.log(this.venues)}\n            </div>\n            <Footer copyrights=\"&copy 2018 Copyright Text\"\n                    moreLinks={\n                       <a className=\"grey-text text-lighten-4 right\" href=\"#!\">More Links</a>\n                    }>\n            </Footer>\n         </main>\n      )\n   }\n}\n\nfunction loadScript(url) {\n   var index  = window.document.getElementsByTagName(\"script\")[0]\n   var script = window.document.createElement(\"script\")\n   script.src = url\n   script.async = true\n   script.defer = true\n   index.parentNode.insertBefore(script, index)\n}\n\nexport default App;\n\n// Runtime type checking for React props and similar objects.\n// https://www.npmjs.com/package/prop-types\nApp.propTypes = {\n   list:   PropTypes.object,\n   markers: PropTypes.array,\n   names: PropTypes.object,\n   //photos: PropTypes.object,\n   //prefix: PropTypes.object,\n   short: PropTypes.object,\n   //suffix: PropTypes.object,\n   venueID: PropTypes.object,\n   venues: PropTypes.object,\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}